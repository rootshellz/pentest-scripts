#!/bin/bash

MONGO_DL_LINK_DEBIAN7_64='https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian71-3.4.2.tgz'
MONGO_DL_LINK_DEBIAN7_32='http://downloads.mongodb.org/linux/mongodb-linux-i386-latest.tgz'

LAIR_APP_DL_LINK='https://github.com/lair-framework/lair/releases/download/v2.5.0/lair-v2.5.0-linux-amd64.tar.gz'

LAIR_API_DL_LINK_64='https://github.com/lair-framework/api-server/releases/download/v1.2.0/api-server_linux_amd64'
LAIR_API_DL_LINK_32='github.com/lair-framework/api-server'

CADDY_DL_LINK_64='https://github.com/mholt/caddy/releases/download/v0.9.5/caddy_linux_amd64.tar.gz'
CADDY_DL_LINK_32='https://github.com/mholt/caddy/releases/download/v0.9.5/caddy_linux_386.tar.gz'

ARCH=$(uname -m)

if [[ $ARCH = 'x86_64' ]]; then
	MONGO_DL_LINK=$MONGO_DL_LINK_DEBIAN7_64
	LAIR_API_DL_LINK=$LAIR_API_DL_LINK_64
	CADDY_DL_LINK=$CADDY_DL_LINK_64
elif [[ $ARCH = 'i686' ]] || [[ $ARCH = 'i386' ]]; then
	MONGO_DL_LINK=$MONGO_DL_LINK_DEBIAN7_32
	LAIR_API_DL_LINK=$LAIR_API_DL_LINK_32
	CADDY_DL_LINK=$CADDY_DL_LINK_32
else
	echo "[!] Bad architecture: $ARCH"
	exit -1
fi

echo "[+] Installing lair-framework on Kali $ARCH"

mkdir ~/lair
cd ~/lair

# Install and configure go
echo "[+] Updating repos"
sudo apt-get update
echo "[+] Installing g++"
sudo apt-get install -y g++
echo "[+] Installing golang"
sudo apt-get install -y golang

# Mongodb - 27017/tcp
echo "[+] Installing mongodb"
curl -o mongodb.tgz $MONGO_DL_LINK
tar -zxvf mongodb.tgz
mkdir db
echo "[+] Starting mongodb (27017/tcp)"
./mongodb*/bin/mongod --dbpath=db --bind_ip=localhost --quiet --nounixsocket --replSet rs0 &
# Give DB time to start
sleep 5
./mongodb*/bin/mongo admin --eval 'rs.initiate({_id:"rs0", members: [{_id: 1, host: "localhost:27017"}]})'

# Lair App (in node.js / Meteor) - 11014/tcp
echo "[+] Installing Lair App"
wget $LAIR_APP_DL_LINK
tar -zxvf lair-v2.5.0-linux-amd64.tar.gz
mv bundle/ lair-app/
cd lair-app
# Install nvm
echo "[+] Installing nvm"
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.26.1/install.sh | bash
# source $HOME/.bashrc
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
# Use nvm to install node
echo "[+] Installing node v6.10.0"
nvm install v6.10.0
# Install node.js dependencies using npm
echo "[+] Installing node dependencies"
cd programs/server
npm i
cd ../..
# Set app environmental variables
export ROOT_URL=http://localhost
export PORT=11014
export MONGO_URL=mongodb://localhost:27017/lair
export MONGO_OPLOG_URL=mongodb://localhost:27017/local
echo "[+] Running Lair App (11014/tcp)"
node main.js 2>&1 | tee output.log &

# Lair API - 11015/tcp
echo "[+] Installing Lair API"
cd ~/lair
mkdir lair-api
cd lair-api
# Set API environmental variables
export MONGO_URL=mongodb://localhost:27017/lair
export API_LISTENER=localhost:11015
if [[ $ARCH = 'x86_64' ]]; then
	wget $LAIR_API_DL_LINK
	chmod +x api-server_linux_amd64
	echo "[+] Starting Lair API 64-bit (11015/tcp)"
	./api-server_linux_amd64 &
elif [[ $ARCH = 'i686' ]] || [[ $ARCH = 'i386' ]]; then
	mkdir src
	cd src
	export GOPATH=$HOME/lair/lair-api/src/
	go get $LAIR_API_DL_LINK
	echo "[+] Starting Lair API 32-bit (11015/tcp)"
	./bin/api-server &
else
	echo "[!] Bad architecture: $ARCH"
	exit -1
fi

# Caddy Reverse Proxy - 11013/tcp
echo "[+] Installing Caddy"
cd ~/lair
mkdir caddy
cd caddy
curl -L -o caddy.tar.gz $CADDY_DL_LINK
tar -zxvf caddy.tar.gz
openssl req -subj "/CN=*" -x509 -newkey rsa:2048 -nodes -keyout key.pem -out cert.pem -days 9999
echo "# Change localhost to the interface you want to listen on.
0.0.0.0:11013
tls cert.pem key.pem
proxy /api localhost:11015
proxy / localhost:11014 {
  websocket
}" > Caddyfile
echo "[+] Starting Caddy (11013/tcp)"
./caddy_* --conf=Caddyfile &


# Install Drones (this is ugly, can cleanup at somepoint)
echo "[+] Installing Drones"
cd ~/lair
mkdir drones
cd drones
export GOPATH=$HOME/lair/drones/
echo "[+] Installing drone-nmap"
go get github.com/lair-framework/drone-nmap
echo "[+] Installing drone-nessus"
go get github.com/lair-framework/drone-nessus
echo "[+] Installing drone-whois"
# drone-whois requires pylair
mkdir python_libs
cd python_libs
wget https://github.com/lair-framework/pylair/releases/download/v1.0.2/pylair-1.0.2.tar.gz
sudo pip install pylair-1.0.2.tar.gz
wget https://github.com/lair-framework/drone-whois/releases/download/v1.1.0/drone-whois-1.1.0.tar.gz
sudo pip install drone-whois-1.1.0.tar.gz
echo "[+] Installing drone-shodan"
cd ../bin
wget -O drone-shodan https://github.com/lair-framework/drone-shodan/releases/download/v1.0.2/drone-shodan_linux_amd64
chmod +x drone-shodan
export SHODAN_KEY='yourkeygoeshere'
echo "[+] Installing drone-export"
cd ..
go get github.com/lair-framework/drone-export
echo "[+] Installing drone-raw"
go get github.com/lair-framework/drone-raw
echo "[+] Installing drone-raw-v1"
go get github.com/lair-framework/drone-raw-v1
echo "[+] Installing drone-cookiescan"
go get github.com/lair-framework/drone-cookiescan
echo "[+] Installing drone-blacksheepwall"
go get github.com/lair-framework/drone-blacksheepwall
echo "[+] Installing drone-downgrade2to1"
go get github.com/lair-framework/drone-downgrade2to1
export PATH=$HOME/lair/drones:$PATH

USERNAME=$(grep password ~/lair/lair-app/output.log | cut -d " " -f 2)
PASSWORD=$(grep password ~/lair/lair-app/output.log | cut -d " " -f 5)
export LAIR_API_SERVER='https://$USERNAME:$PASSWORD@localhost:11013'
echo "Username: $USERNAME
Password: $PASSWORD" > ~/lair/lair-app/creds.txt
sleep 5
echo "Installed and started"
echo "Username: $USERNAME"
echo "Password: $PASSWORD"
echo "DONE"
